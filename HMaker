#!/usr/bin/python

import os
import sys
import time
import re

class Functions:
    def __init__(self, txt):
        self.func_types = []
        self.func_names = []
        self.func_args = []
        self.step = 3
        is_name = False
        help_var = ''
        for line in txt.split('\n'):
            if line:
                if line[0].isalpha() and not (re.search('[\t ]main\(', line) or 'static ' in line or re.search('struct[\t ]', line) or re.search('union[\t ]', line) or re.search('typedef[\t ]', line) or is_name):
                    if line.find('(') == -1:
                        continue
                    help_var = line[:line.find('(')].split()
                    if help_var[-1][:2] == '_g':
                        help_var = ''
                        continue
                    is_name = True
                    self.func_names.append(help_var[-1])
                    self.func_types.append(' '.join(help_var[:-1]))
                    help_var = line[line.find('(') + 1:]
                    if ';' in help_var:
                        self.func_names.pop(-1)
                        self.func_types.pop(-1)
                        help_var = ''
                        is_name = False
                        continue
                    continue
                if is_name and line[0] == '{':
                    is_name = False
                    if ';' in help_var:
                        self.func_names.pop(-1)
                        self.func_types.pop(-1)
                    else:
                        self.func_args.append([' '.join(x.split()) for x in help_var[:help_var.rfind(')')].split(',')])
                    help_var = ''
                if is_name:
                    help_var += line[:] + ' '
                    if ';' in help_var:
                        self.func_names.pop(-1)
                        self.func_types.pop(-1)
                        help_var = ''
                        is_name = False
                        continue

    def __str__(self):
        if len(self) == 0:
            return ''
        for i in range(len(self.func_args)):
            for j in range(len(self.func_args[i])):
                self.func_args[i][j] += ', '
            self.func_args[i][-1] = self.func_args[i][-1][:-2] + ');'
        for i in range(len(self.func_args)):
            bord = self.step * 4 + len(self.func_names[i]) + 1
            if bord + len(self.func_args[i][0]) > 80:
                self.func_args[i][0] = '\n' + '\t' * (self.step - 1) + self.func_args[i][0]
            else:
                bord += len(self.func_args[i][0]) + 1
            for j in range(1, len(self.func_args[i])):
                if bord + len(self.func_args[i][j]) + (2 if j - 1 == len(self.func_args[i][1:]) else 1) > 80:
                    self.func_args[i][j - 1] = self.func_args[i][j - 1][:-1] + '\n' + '\t' * (self.step - 1)
                    bord = (self.step + 1) * 4 + len(self.func_args[i][j])
                else:
                    bord += len(self.func_args[i][j]) + (2 if j - 1 == len(self.func_args[i][1:]) else 1)

        return '\n'.join([self.func_types[x] + '\t' * (self.step - len(self.func_types[x]) / 4) + self.func_names[x] + '(' + ''.join(self.func_args[x]) for x in range(len(self.func_types))])

    def __len__(self):
        return len(self.func_names)

    def take_step(self, step):
        if len(self) == 0:
            return 0
        if step:
            self.step = step
        else:
            self.step = len(max(self.func_types)) / 4 + 1
        return self.step


class Structure:
    def __init__(self, txt):
        self.struct_type = []
        self.struct_name = []
        self.typdef = []
        self.body = []
        self.step = 3
        body = False
        keys_list = ['struct ', 'union ', ' struct ', ' union ', ' struct\t', ' union\t', 'struct\t', 'union\t', ' enum\t', ' enum ', 'enum\t', 'enum ']
        for line in txt.split('\n'):
            if line:
                if line[0].isalpha() and sum([1 if i in line else 0 for i in keys_list]) > 0:
                    help_var = line.split()
                    self.struct_type.append(' '.join(help_var[:-1]))
                    self.struct_name.append(help_var[-1])
                    self.body.append('')
                    self.typdef.append('')
                    body = True
                    continue
                if body and line[0] == '}':
                    body = False
                    if len(line) > 2:
                        self.typdef[-1] = line.split()[-1]
                        self.body[-1] += '}'
                    else:
                        self.body[-1] += '};'
                if body:
                    self.body[-1] += line + '\n'

    def take_step(self, step):
        if len(self) == 0:
            return 0
        if step:
            self.step = step
        else:
            self.step = len(max(self.struct_type)) / 4 + 1
        return self.step

    def __len__(self):
        return len(self.struct_name)

    def __str__(self):
        return '\n'.join([self.struct_type[i] + '\t' * (self.step - len(self.struct_type[i]) / 4) + self.struct_name[i] + '\n' + self.body[i] + (('\t' * self.step + self.typdef[i]) if self.typdef[i] else '') + '\n' for i in range(len(self))])


class FileForHeader:
    def __init__(self, txt, name):
        self.file_name = name
        self.txt = txt
        self.functions_list = Functions(txt)
        self.structure_list = Structure(txt)
        self.glob_list = []
        self.includes_list = []
        self.define_list = []
        self.typedef_list = []
        prev_line = ''
        for line in txt.split('\n'):
            if line:
                if line[0] == '#':
                    if 'define' in line and not '#ifndef' in prev_line:
                        self.define_list.append(line)
                    if 'include' in line:
                        self.includes_list.append(line)
                if line[0].isalpha():
                    if ' g_' in line or '\tg_' in line:
                        if '=' in line:
                            self.glob_list.append(line[:line.find('=')])
                        else:
                            self.glob_list.append(line)
                    if 'typedef' in line and ';' in line:
                        self.typedef_list.append(line)
            prev_line = line

    def __len__(self):
        return len(self.functions_list) + len(self.structure_list)

    def take_stap(self, step):
        return max(self.functions_list.take_step(step), self.structure_list.take_step(step))

    def __str__(self):
        return self.file_name + '\n\n' + '\n'.join(self.define_list) + '\n'.join(self.includes_list) + '\n\n' + '\n'.join(self.glob_list) + '\n\n' + '\n'.join(self.typedef_list) + '\n\n' + str(self.functions_list) + '\n' + str(self.structure_list)


def del_comments(s):
    l = len(s)
    i = 0
    while i < l:
        if s[i: i + 2] == '//':
            s = s[:i] + s[s[i:].find('\n') + i:]
            l = len(s)
            continue
        if s[i: i + 2] == '/*':
            if s[i + 2:].find('*/') == -1:
                s = s[:i]
                break
            s = s[:i] + s[s[i + 2:].find('*/') + 4 + i:]
            l = len(s)
            continue
        i += 1
    return s


if len(sys.argv) >= 2:
    if '-h' == sys.argv[1] or '--help' == sys.argv[1]:
        sys.exit('\033[93m' + '''makeheader(\033[91mav1 av2\033[93m)\n\033[91mav1\033[93m -- it's 
                    the path to dir where script will find \033[91m.c\033[93m files. it may look 
                    like \033[91m'path/path/'\033[93m or \033[91mnone\033[93m. if the path doesn
                    't specified it will be \033[91m=pwd\033[93m.\n\033[91mav2\033[93m -- this a
                    rg may indicate path where \033[91m.h\033[93m file will be put or name of .h
                     file. it may look like \033[91m'path/path/name.h'\033[93m or \033[91m'path/
                     path'\033[93m or \033[91mnone\033[93m. if the name doesn't specified it wil
                     l be name of the last dir in \033[91mav1\033[93m. if path doesn't specified
                      it will be \033[91mav1\033[93m''' + '\033[0m')

if len(sys.argv) == 1:
    arg1 = '.'
    arg2 = '.'
if len(sys.argv) == 2:
    arg1 = sys.argv[1]
    arg2 = sys.argv[1]
if len(sys.argv) == 3:
    arg1 = sys.argv[1]
    arg2 = sys.argv[2]
if len(sys.argv) > 3:
    sys.exit('\033[91m' + "ERROR. so many arguments" + '\033[0m')

start = os.getcwd()

if os.path.exists(arg1) and os.path.isdir(arg1) and len(os.listdir(arg1)) != 0:
    os.chdir(arg1)
    path = os.getcwd()
    os.chdir(start)
else:
    sys.exit('\033[91m' + "ERROR. directory is empty or does not exist" + '\033[0m')

if arg2[-2:] != '.h' and (not os.path.exists(arg2) or not os.path.isdir(arg2)):
    sys.exit('\033[91m' + "ERROR. header name wrong or dir does not exist" + '\033[0m')

if (os.path.exists(arg2) and os.path.isdir(arg2)):
    if arg2 == '/':
        path_to_head = ''
    else:
        os.chdir(arg2)
        path_to_head = os.getcwd()
        os.chdir(start)
    arg2 = path[path.rfind('/') + 1:] + '.h'
elif '/' in arg2:
    if os.path.exists(arg2[:arg2.rfind('/')]) and os.path.isdir(arg2[:arg2.rfind('/')]):
        os.chdir(arg2[:arg2.rfind('/')])
        path_to_head = os.getcwd()
        os.chdir(start)
        arg2 = arg2[arg2.rfind('/') + 1:]
    elif arg2.rfind('/') == 0:
        path_to_head = ''
        arg2 = arg2[1:]
    else:
        sys.exit('\033[91m' + "ERROR. i think u give me wrong path" + '\033[0m')
else:
    path_to_head = path
name = path_to_head + '/' + arg2

if os.path.exists(name):
    ans = raw_input('\033[91m' + "File with the same name already exists. Replace?[y/n]" + '\033[0m').upper()
    while ans != 'Y' and ans != 'N':
        ans = raw_input('\033[93m' + "Pleas write [y/n]" + '\033[0m').upper()
    if (ans == 'N'):
        sys.exit()

ifndefname = name[name.rfind("/") + 1 : -2].upper() + '_H'

shapka = "/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   shapka                                             :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: " + os.getlogin() + " <marvin@42.fr>" + " " * (28 - len(os.getlogin())) + "+#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: " + time.strftime('%Y/%m/%d %H:%M:%S', time.localtime(time.time())) + " by " + os.getlogin() + " " * (18 - len(os.getlogin())) + "#+#    #+#             */\n/*   Updated: " + time.strftime('%Y/%m/%d %H:%M:%S', time.localtime(time.time())) + " by " + os.getlogin() + " " * (17 - len(os.getlogin())) + "###   ########.fr       */\n/*                                                                            */\n/* ************************************************************************** */\n"

files_list = []
tabs_step = 0
typedefs = set()
includs = set()
defines = []
globs = set()
globs_names = set()
struct_names = set()
defines_names = set()

fils = os.listdir(path)

# print files

for i in fils:
    if i[-2:] == '.c' or i[-2:] == '.h':
        with open(path + '/' + i) as f:
            txt = f.read()
        if txt.find(os.getlogin()) != 414:
            print 'Parsing DATA from pilfered file ' + i
        else:
            print 'Parsing DATA from file ' + i
        f = FileForHeader(del_comments(txt), i)
        for j in f.define_list:
            help_var = (j if j[1] == ' ' else '# ' + j[2:]).split()
            if help_var[2] not in defines_names:
                defines_names.add(help_var[2])
                defines.append(j if j[1] == ' ' else '# ' + j[2:])
        if defines and defines[-1] != '':
            defines.append('')
        for j in f.includes_list:
            includs.add(j.split()[-1])
        for j in f.typedef_list:
            help_var = j.split()
            tabs_step = max(len(' '.join(help_var[:-1])) / 4 + 1, tabs_step)
            typedefs.add((help_var[-1], ' '.join((help_var[:-1]))))
        for j in f.glob_list:
            help_var = j.split()
            tabs_step = max(len(' '.join(help_var[:-1])) / 4 + 1, tabs_step)
            help_var[-1] = (help_var[-1] + ';' if ';' not in help_var[-1] else help_var[-1])
            if help_var[-1] not in globs_names:
                globs_names.add(help_var[-1])
                help_var[0] = ('extern ' + ' '.join((help_var[:-1])) if 'extern ' not in ' '.join((help_var[:-1])) else ' '.join((help_var[:-1])))
                globs.add((help_var[-1], help_var[0]))
        tabs_step = max(f.take_stap(0), tabs_step)
        files_list.append(f)

for i in files_list:
    i.take_stap(tabs_step)

header_txt = '\n'.join(defines) + '\n' + '\n'.join(map(lambda inc: '# include ' + inc, includs)) + '\n\n'
header_txt += '\n'.join(map(lambda (x, y): y + '\t' * (tabs_step - len(y) / 4) + x + (';' if ';' not in x else ''), globs)) + '\n\n'
header_txt += '\n'.join(map(lambda (x, y): y + '\t' * (tabs_step - len(y) / 4) + x, typedefs)) + '\n\n'
for i in files_list:
    if len(i.structure_list):
        for j in range(len(i.structure_list.struct_name)):
            if i.structure_list.struct_name[j] not in struct_names:
                struct_names.add(i.structure_list.struct_name[j])
                header_txt += i.structure_list.struct_type[j] + '\t' * (i.structure_list.step - len(max(i.structure_list.struct_type)) / 4) +\
                i.structure_list.struct_name[j] + '\n' + i.structure_list.body[j] + (('\t' * i.structure_list.step + i.structure_list.typdef[j]) if i.structure_list.typdef[j] else '') + '\n\n'



for i in files_list:
    if len(i.functions_list):
        header_txt += '/*\n**' + i.file_name + '\n*/\n'
        header_txt += str(i.functions_list) + '\n'

while '    ' in header_txt:
        header_txt = header_txt[:header_txt.find('    ')] + '\t' + header_txt[header_txt.find('    ') + 4:]
while ' \t' in header_txt:
        header_txt = header_txt[:header_txt.find(' \t')] + '\t\t' + header_txt[header_txt.find(' \t') + 2:]

header_txt += '#endif\n'

try:
    with open(name, 'w') as f:
        f.write(shapka + '\n#ifndef ' + ifndefname + '\n# define ' + ifndefname + '\n')
        f.write(header_txt)
except IOError:
    sys.exit('\033[91m' + "ERROR. cant write in directory " + '\033[1m\033[93m' + path_to_head + '/' + '\033[0m')
